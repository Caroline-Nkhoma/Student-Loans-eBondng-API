// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentLoanseBonderAPI;

#nullable disable

namespace StudentLoanseBonderAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241128151650_FixStudent")]
    partial class FixStudent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.BondingForm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("form_id");

                    b.Property<string>("GuardianDistrict")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guardian_district");

                    b.Property<string>("GuardianFullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guardian_full_name");

                    b.Property<string>("GuardianHomeVillage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guardian_home_village");

                    b.Property<string>("GuardianOccupation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guardian_occupation");

                    b.Property<string>("GuardianPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guardian_phone_number");

                    b.Property<string>("GuardianPhysicalAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guardian_physical_address");

                    b.Property<string>("GuardianPostalAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guardian_postal_address");

                    b.Property<string>("GuardianTraditionalAuthority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guardian_traditional_authority");

                    b.Property<string>("InstitutionAdminFullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("institution_admin_full_name");

                    b.Property<string>("InstitutionAdminSignature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("institution_admin_signature");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("institution_name");

                    b.Property<string>("LoansBoardOfficialFullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("loans_board_official_full_name");

                    b.Property<string>("LoansBoardOfficialSignature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("loans_board_official_signature");

                    b.Property<string>("StudentAcademicYear")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_academic_year");

                    b.Property<string>("StudentBankAccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_bank_account_name");

                    b.Property<string>("StudentBankAccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_bank_account_number");

                    b.Property<string>("StudentBankName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_bank_name");

                    b.Property<string>("StudentBranchName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_branch_name");

                    b.Property<DateOnly>("StudentDateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("student_date_of_birth");

                    b.Property<string>("StudentDistrict")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_district");

                    b.Property<string>("StudentFullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_full_name");

                    b.Property<string>("StudentHomeVillage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_home_village");

                    b.Property<string>("StudentNationalIdNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_national_id_number");

                    b.Property<string>("StudentNationalIdScan")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_national_id_scan");

                    b.Property<string>("StudentPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_phone_number");

                    b.Property<string>("StudentPostalAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_postal_address");

                    b.Property<string>("StudentProgrammeOfStudy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_programme_of_study");

                    b.Property<string>("StudentRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_registration_number");

                    b.Property<string>("StudentSex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_sex");

                    b.Property<string>("StudentSignature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_signature");

                    b.Property<string>("StudentStudentIdScan")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_student_id_scan");

                    b.Property<string>("StudentTraditionalAuthority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_traditional_authority");

                    b.Property<int>("StudentYearOfStudy")
                        .HasColumnType("integer")
                        .HasColumnName("student_year_of_study");

                    b.Property<decimal>("TuitionLoanAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("tuition_loan_amount");

                    b.Property<decimal>("UpkeepLoanAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("upkeep_loan_amount");

                    b.HasKey("Id")
                        .HasName("pk_form");

                    b.ToTable("form", (string)null);
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.BondingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bonding_period_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_bonding_period");

                    b.ToTable("bonding_period", (string)null);
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FormId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("form_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_comment");

                    b.HasIndex("FormId")
                        .HasDatabaseName("ix_comment_form_id");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.Guardian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("guardian_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("district");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("HomeVillage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("home_village");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("occupation");

                    b.Property<List<string>>("OtherNames")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("other_names");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("physical_address");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_address");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<string>("TraditionalAuthority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("traditional_authority");

                    b.HasKey("Id")
                        .HasName("pk_guardian");

                    b.ToTable("guardian", (string)null);
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.Institution", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("instituion_id");

                    b.Property<int?>("BondingPeriodId")
                        .HasColumnType("integer")
                        .HasColumnName("bonding_period_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_instituion");

                    b.HasIndex("BondingPeriodId")
                        .HasDatabaseName("ix_instituion_bonding_period_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_instituion_name");

                    b.ToTable("instituion", (string)null);
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("notification_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("text")
                        .HasColumnName("Account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("student_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("academic_year");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_id");

                    b.Property<string>("BankAccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank_account_name");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("text")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank_name");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("branch_name");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("district");

                    b.Property<int?>("GuardianId")
                        .HasColumnType("integer")
                        .HasColumnName("guardian_id");

                    b.Property<string>("HomeVillage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("home_village");

                    b.Property<string>("InstitutionId")
                        .HasColumnType("text")
                        .HasColumnName("institution_id");

                    b.Property<string>("NationalIdNumber")
                        .HasColumnType("text")
                        .HasColumnName("national_id_number");

                    b.Property<string>("NationalIdScan")
                        .HasColumnType("text")
                        .HasColumnName("national_id_scan");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_address");

                    b.Property<string>("ProgrammeOfStudy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("programme_of_study");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text")
                        .HasColumnName("registration_number");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sex");

                    b.Property<string>("StudentIdScan")
                        .HasColumnType("text")
                        .HasColumnName("student_id_scan");

                    b.Property<string>("TraditionalAuthority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("traditional_authority");

                    b.Property<int>("YearOfStudy")
                        .HasColumnType("integer")
                        .HasColumnName("year_of_study");

                    b.HasKey("Id")
                        .HasName("pk_student");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_student_account_id");

                    b.HasIndex("GuardianId")
                        .HasDatabaseName("ix_student_guardian_id");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_student_institution_id");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<List<string>>("OtherNames")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("other_names");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture");

                    b.Property<string>("Signature")
                        .HasColumnType("text")
                        .HasColumnName("signature");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_user_account_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.Comment", b =>
                {
                    b.HasOne("StudentLoanseBonderAPI.Entities.BondingForm", "Form")
                        .WithMany("Comments")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_form_form_id");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.Institution", b =>
                {
                    b.HasOne("StudentLoanseBonderAPI.Entities.BondingPeriod", "BondingPeriod")
                        .WithMany()
                        .HasForeignKey("BondingPeriodId")
                        .HasConstraintName("fk_instituion_bonding_period_bonding_period_id");

                    b.Navigation("BondingPeriod");
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.Student", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_users_account_id");

                    b.HasOne("StudentLoanseBonderAPI.Entities.Guardian", "Guardian")
                        .WithMany()
                        .HasForeignKey("GuardianId")
                        .HasConstraintName("fk_student_guardian_guardian_id");

                    b.HasOne("StudentLoanseBonderAPI.Entities.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .HasConstraintName("fk_student_instituion_institution_id");

                    b.Navigation("Account");

                    b.Navigation("Guardian");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.User", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_users_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("StudentLoanseBonderAPI.Entities.BondingForm", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
